// RobotBuilder Version: 2.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.


package org.usfirst.frc3397.Aurora2019.subsystems;


import org.usfirst.frc3397.Aurora2019.Robot;
import org.usfirst.frc3397.Aurora2019.Constants;
import org.usfirst.frc3397.Aurora2019.OI;

import edu.wpi.first.wpilibj.DigitalInput;
// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=IMPORTS
import edu.wpi.first.wpilibj.Solenoid;

import edu.wpi.first.wpilibj.VictorSP;
import edu.wpi.first.wpilibj.command.Subsystem;

// END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=IMPORTS

/**
 *
 */
public class Hatch {

    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTANTS

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTANTS

    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
    private VictorSP hatchArm;
    private Solenoid hatchRam;
    private OI controlScheme = new OI(0, 1);
    private DigitalInput hatchArmStop;
    private Robot robot;
    double current;
    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS

    public Hatch() {
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTORS
        hatchArm = new VictorSP(Constants.HatchArmPWM);
        hatchRam = new Solenoid(0, 0);
        hatchArmStop = new DigitalInput(Constants.HatchArmStopDIO);
      
        
        
        

        // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTORS
    }
    public void HatchWork() {
        //Hatch Operators
        if (controlScheme.getOperatorAxis3()){
            hatchRam.set(true);
        } else if (controlScheme.getOperatorAxis2()){
            hatchRam.set(false);
        }
    }

    public void HatchArm() {
        //Hatch Arm Operators
        if (controlScheme.operateLittleArms()){
            hatchArm.setSpeed(.6);
        } else {
            if (!hatchArmStop.get()){
                hatchArm.setSpeed(0);
            } else {
                hatchArm.setSpeed(-0.7);
            }
            
        
        }
        
    }
    public void HatchIn() {
        hatchRam.set(false);
    }
    
    public void HatchOut() {
        hatchRam.set(true);
    }
   
}

