// RobotBuilder Version: 2.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.


package org.usfirst.frc3397.Aurora2019.subsystems;



import org.usfirst.frc3397.Aurora2019.Constants;
import org.usfirst.frc3397.Aurora2019.OI;

import edu.wpi.first.networktables.NetworkTable;
import edu.wpi.first.wpilibj.DigitalInput;
import edu.wpi.first.wpilibj.Encoder;
import edu.wpi.first.wpilibj.VictorSP;
import edu.wpi.first.wpilibj.smartdashboard.SmartDashboard;

// END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=IMPORTS

/**
 *
 */
public class Intake {

    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTANTS

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTANTS

    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
    private VictorSP rightIntake;
    private VictorSP leftIntake;
    private VictorSP intakeLift;

    private Encoder itIncoder;
    private NetworkTable networktable;
    private double itAngle;
    private double itGain;
    private double itBias;
    private double itError;
    private double itMControl;
    private double itTarget; 
    OI controlScheme = new OI(0, 1);
    
    private int itCount;
    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS

    public Intake() {

        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTORS
        rightIntake = new VictorSP(Constants.rightIntakePWM);
        leftIntake = new VictorSP(Constants.leftIntakePWM);
        intakeLift = new VictorSP(Constants.intakeLiftPWM);
        
        itIncoder = new Encoder(Constants.intakeEncoderA,Constants.intakeEncoderB);
        

        // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTORS
    }
    public void IntakeLift() {
        

        if (controlScheme.operatorX()){
            itIncoder.reset();
        }
        
        if (controlScheme.getIntakeArmUp()){
            // if (liftBackStop.get()){
                intakeLift.setSpeed(-0.4);
            
            // }
            
        } else if (controlScheme.getIntakeArmDown()){

                if (itAngle > -13.0){
                    intakeLift.setSpeed(0.4);
                } else {
                    intakeLift.setSpeed(0);
                }
            // if (iCount > 3000){
               
            // } else {
            //     intakeLift.set(-0.3);
            // }
        } else {
                if (itAngle < 80){
                    intakeLift.setSpeed(-0.1);
                } else {
                    intakeLift.setSpeed(0);
                }
                
            } 
           
            itCount = itIncoder.getRaw();
            itAngle = 90.0+(0.0567*((double)itCount+234.0));
            
            SmartDashboard.putNumber("itAngle", itAngle);
        }   
              
    
    public void runIntake(){
        //Runs intake, moves a little at default
        if (controlScheme.getLeftTrigger()){
            leftIntake.setSpeed(.2);
            rightIntake.setSpeed(-.2);
        } else if (controlScheme.getRightTrigger()){
            leftIntake.setSpeed(-.4);
            rightIntake.setSpeed(.4);
        } else {
            leftIntake.set(0.06);
            rightIntake.set(-0.06);
        }
        

       
    }
    public void runInIntake(double speed){
        //Intake sucking in
        leftIntake.setSpeed(-speed);
        rightIntake.setSpeed(speed);
    }
    public void runOutIntake(double speed){
        //Intake pushing out
        leftIntake.setSpeed(speed);
        rightIntake.setSpeed(-speed);
    }
    public void stopIntake(){
        //Stopping intake
        leftIntake.setSpeed(0);
        rightIntake.setSpeed(0);
    }
    public void liftIntake(double speed){
        //Brings up arm
        intakeLift.setSpeed(speed);
    }
    public void stopliftIntake(){
        intakeLift.setSpeed(0);
    }
    public void lowerIntake(double speed){
        //Brings down arm
        intakeLift.setSpeed(speed);
    }
    
    
    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CMDPIDGETTERS


    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CMDPIDGETTERS

    // Put methods for controlling this subsystem
    // here. Call these from Commands.

}

